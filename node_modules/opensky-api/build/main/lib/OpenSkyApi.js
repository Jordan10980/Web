"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoundingBox = exports.OpenSkyApi = void 0;
('use strict');
const axios_1 = __importDefault(require("axios"));
const iso_url_1 = require("iso-url");
const StateVectorMapper_1 = require("../mappers/StateVectorMapper");
const FlightMapper_1 = require("./../mappers/FlightMapper");
const axiosConfig = {
    timeout: 5000,
    headers: { 'User-Agent': 'OpenSkyApi-TS/1.0' },
};
class OpenSkyApi {
    constructor(credentials) {
        this.authenticated = false;
        this.lastRequestTime = {
            GET_STATES: null,
            GET_MY_STATES: null,
            GET_FLIGHTS: null,
        };
        if ((credentials === null || credentials === void 0 ? void 0 : credentials.username) && (credentials === null || credentials === void 0 ? void 0 : credentials.password)) {
            axiosConfig.auth = {
                username: credentials === null || credentials === void 0 ? void 0 : credentials.username,
                password: credentials === null || credentials === void 0 ? void 0 : credentials.password,
            };
            this.authenticated = true;
        }
        this._axios = axios_1.default.create(axiosConfig);
    }
    getFlights(beginTime, endTime) {
        const nvps = [];
        nvps.push({ begin: String(beginTime) });
        nvps.push({ end: String(endTime) });
        return this.getOpenSkyFlights(OpenSkyApi.FLIGHTS_URI, nvps);
    }
    getFlightsByArrivalAirport(airport, beginTime, endTime) {
        const nvps = [];
        nvps.push({ airport });
        nvps.push({ begin: String(beginTime) });
        nvps.push({ end: String(endTime) });
        return this.getOpenSkyFlights(OpenSkyApi.FLIGHTS_BY_ARRIVAL_URI, nvps);
    }
    getFlightsByDepartureAirport(airport, beginTime, endTime) {
        const nvps = [];
        nvps.push({ airport });
        nvps.push({ begin: String(beginTime) });
        nvps.push({ end: String(endTime) });
        return this.getOpenSkyFlights(OpenSkyApi.FLIGHTS_BY_DEPARTURE_URI, nvps);
    }
    getFlightsByAircraft(icao24, beginTime, endTime) {
        const nvps = [];
        nvps.push({ icao24 });
        nvps.push({ begin: String(beginTime) });
        nvps.push({ end: String(endTime) });
        return this.getOpenSkyFlights(OpenSkyApi.FLIGHTS_BY_AIRCRAFT_URI, nvps);
    }
    getStates(time, icao24, bbox) {
        const nvps = [];
        if (time) {
            nvps.push({ time: String(time) });
        }
        icao24 === null || icao24 === void 0 ? void 0 : icao24.forEach((i) => {
            nvps.push({ icao24: i });
        });
        if (bbox) {
            nvps.push({ lamin: String(bbox.minLatitude) });
            nvps.push({ lamax: String(bbox.maxLatitude) });
            nvps.push({ lomin: String(bbox.minLongitude) });
            nvps.push({ lomax: String(bbox.maxLongitude) });
        }
        if (this.checkRateLimit('GET_STATES', 4900, 9900)) {
            return this.getOpenSkyStates(OpenSkyApi.STATES_URI, nvps);
        }
        return null;
    }
    getMyStates(time, icao24, serials) {
        if (!this.authenticated) {
            throw new Error("Anonymous access of 'myStates' not allowed");
        }
        const nvps = [];
        if (time) {
            nvps.push({ time: String(time) });
        }
        icao24 === null || icao24 === void 0 ? void 0 : icao24.forEach((i) => {
            nvps.push({ icao24: i });
        });
        serials === null || serials === void 0 ? void 0 : serials.forEach((s) => {
            nvps.push({ serials: String(s) });
        });
        if (this.checkRateLimit('GET_MY_STATES', 900, 0)) {
            return this.getOpenSkyStates(OpenSkyApi.MY_STATES_URI, nvps);
        }
        return null;
    }
    async getOpenSkyStates(url, nvps) {
        var _b;
        const params = new iso_url_1.URLSearchParams();
        nvps.forEach((i) => {
            for (const [key, value] of Object.entries(i)) {
                params.append(key, value);
            }
        });
        const { data } = await this._axios.get(url, {
            params,
        });
        const states = ((_b = data === null || data === void 0 ? void 0 : data.states) === null || _b === void 0 ? void 0 : _b.map((state) => (0, StateVectorMapper_1.stateVectorMapper)(state))) || [];
        return {
            time: data.time,
            states,
        };
    }
    async getOpenSkyFlights(url, nvps) {
        const params = new iso_url_1.URLSearchParams();
        nvps.forEach((i) => {
            for (const [key, value] of Object.entries(i)) {
                params.append(key, value);
            }
        });
        const { data } = await this._axios.get(url, {
            params,
            validateStatus: (status) => (status >= 200 && status < 300) || status === 404,
        });
        if (Array.isArray(data)) {
            return data.map((d) => (0, FlightMapper_1.flightMapper)(d));
        }
        return new Array();
    }
    checkRateLimit(type, timeDiffAuth, timeDiffNoAuth) {
        const t = this.lastRequestTime[type];
        const now = Date.now();
        this.lastRequestTime[type] = now;
        return (t == null ||
            (this.authenticated && now - t > timeDiffAuth) ||
            (!this.authenticated && now - t > timeDiffNoAuth));
    }
}
exports.OpenSkyApi = OpenSkyApi;
_a = OpenSkyApi;
OpenSkyApi.HOST = 'opensky-network.org';
OpenSkyApi.API_ROOT = `https://${_a.HOST}/api`;
OpenSkyApi.STATES_URI = `${_a.API_ROOT}/states/all`;
OpenSkyApi.MY_STATES_URI = `${_a.API_ROOT}/states/own`;
OpenSkyApi.FLIGHTS_URI = `${OpenSkyApi.API_ROOT}/flights/all`;
OpenSkyApi.FLIGHTS_BY_AIRCRAFT_URI = `${OpenSkyApi.API_ROOT}/flights/aircraft`;
OpenSkyApi.FLIGHTS_BY_ARRIVAL_URI = `${OpenSkyApi.API_ROOT}/flights/arrival`;
OpenSkyApi.FLIGHTS_BY_DEPARTURE_URI = `${OpenSkyApi.API_ROOT}/flights/departure`;
var BoundingBox_1 = require("./BoundingBox");
Object.defineProperty(exports, "BoundingBox", { enumerable: true, get: function () { return BoundingBox_1.BoundingBox; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3BlblNreUFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvT3BlblNreUFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUVmLGtEQUF5RDtBQUN6RCxxQ0FBMEM7QUFFMUMsb0VBQWlFO0FBS2pFLDREQUF5RDtBQUt6RCxNQUFNLFdBQVcsR0FBdUI7SUFDdEMsT0FBTyxFQUFFLElBQUk7SUFDYixPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsbUJBQW1CLEVBQUU7Q0FDL0MsQ0FBQztBQUVGLE1BQWEsVUFBVTtJQW9CckIsWUFBWSxXQUF5QjtRQVI3QixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUV0QixvQkFBZSxHQUF1QztZQUM1RCxVQUFVLEVBQUUsSUFBSTtZQUNoQixhQUFhLEVBQUUsSUFBSTtZQUNuQixXQUFXLEVBQUUsSUFBSTtTQUNsQixDQUFDO1FBR0EsSUFBSSxDQUFBLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxRQUFRLE1BQUksV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLFFBQVEsQ0FBQSxFQUFFO1lBQ2xELFdBQVcsQ0FBQyxJQUFJLEdBQUc7Z0JBQ2pCLFFBQVEsRUFBRSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsUUFBUTtnQkFDL0IsUUFBUSxFQUFFLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxRQUFRO2FBQ2hDLENBQUM7WUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztTQUMzQjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU0sVUFBVSxDQUFDLFNBQWlCLEVBQUUsT0FBZTtRQUNsRCxNQUFNLElBQUksR0FBa0MsRUFBRSxDQUFDO1FBRS9DLElBQUksQ0FBQyxJQUFJLENBQUMsRUFB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