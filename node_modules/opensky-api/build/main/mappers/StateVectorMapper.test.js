"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const StateVectorMapper_1 = require("./StateVectorMapper");
describe('State Vector Mapper', () => {
    it.each([
        { raw: null },
        { raw: undefined },
        { raw: {} },
        { raw: { a: 'b' } },
        { raw: 1 },
        { raw: 'string' },
    ])('should throw error if raw data is not array: ($raw)', ({ raw }) => {
        // @ts-expect-error this is for testing
        expect(() => (0, StateVectorMapper_1.stateVectorMapper)(raw)).toThrow('StateVectorMapper requires input array');
    });
    it('should map an empty state vector', () => {
        expect((0, StateVectorMapper_1.stateVectorMapper)([])).toEqual({
            baroAltitude: undefined,
            callsign: undefined,
            geoAltitude: undefined,
            heading: undefined,
            icao24: undefined,
            lastContact: undefined,
            lastPositionUpdate: undefined,
            latitude: undefined,
            longitude: undefined,
            onGround: undefined,
            originCountry: undefined,
            positionSource: undefined,
            serials: undefined,
            spi: undefined,
            squawk: undefined,
            velocity: undefined,
            verticalRate: undefined,
        });
    });
    it('should map a state vector', () => {
        expect((0, StateVectorMapper_1.stateVectorMapper)([
            'icao24',
            'callsign',
            'originCountry',
            'lastPositionUpdate',
            'lastContact',
            'longitude',
            'latitude',
            'baroAltitude',
            'onGround',
            'velocity',
            'heading',
            'verticalRate',
            'serials',
            'geoAltitude',
            'squawk',
            'spi',
            'positionSource',
        ])).toEqual({
            icao24: 'icao24',
            callsign: 'callsign',
            originCountry: 'originCountry',
            lastPositionUpdate: 'lastPositionUpdate',
            lastContact: 'lastContact',
            longitude: 'longitude',
            latitude: 'latitude',
            baroAltitude: 'baroAltitude',
            onGround: 'onGround',
            velocity: 'velocity',
            heading: 'heading',
            verticalRate: 'verticalRate',
            serials: 'serials',
            geoAltitude: 'geoAltitude',
            squawk: 'squawk',
            spi: 'spi',
            positionSource: 'positionSource',
        });
    });
    it('should trim the callsign', () => {
        expect((0, StateVectorMapper_1.stateVectorMapper)(['icao24', '    callsign    ']).callsign).toEqual('callsign');
    });
    it('should skip the callsign trimming', () => {
        expect((0, StateVectorMapper_1.stateVectorMapper)(['icao24', null]).callsign).toEqual(undefined);
        expect((0, StateVectorMapper_1.stateVectorMapper)(['icao24', undefined]).callsign).toEqual(undefined);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdGVWZWN0b3JNYXBwZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYXBwZXJzL1N0YXRlVmVjdG9yTWFwcGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBd0Q7QUFFeEQsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQ04sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFO1FBQ2IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFO1FBQ2xCLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtRQUNYLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ25CLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtRQUNWLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTtLQUNsQixDQUFDLENBQUMscURBQXFELEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDcEUsdUNBQXVDO1FBQ3ZDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLHFDQUFpQixFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUMxQyx3Q0FBd0MsQ0FDekMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxNQUFNLENBQUMsSUFBQSxxQ0FBaUIsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNwQyxZQUFZLEVBQUUsU0FBUztZQUN2QixRQUFRLEVBQUUsU0FBUztZQUNuQixXQUFXLEVBQUUsU0FBUztZQUN0QixPQUFPLEVBQUUsU0FBUztZQUNsQixNQUFNLEVBQUUsU0FBUztZQUNqQixXQUFXLEVBQUUsU0FBUztZQUN0QixrQkFBa0IsRUFBRSxTQUFTO1lBQzdCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLGFBQWEsRUFBRSxTQUFTO1lBQ3hCLGNBQWMsRUFBRSxTQUFTO1lBQ3pCLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLEdBQUcsRUFBRSxTQUFTO1lBQ2QsTUFBTSxFQUFFLFNBQVM7WUFDakIsUUFBUSxFQUFFLFNBQVM7WUFDbkIsWUFBWSxFQUFFLFNBQVM7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLE1BQU0sQ0FDSixJQUFBLHFDQUFpQixFQUFDO1lBQ2hCLFFBQVE7WUFDUixVQUFVO1lBQ1YsZUFBZTtZQUNmLG9CQUFvQjtZQUNwQixhQUFhO1lBQ2IsV0FBVztZQUNYLFVBQVU7WUFDVixjQUFjO1lBQ2QsVUFBVTtZQUNWLFVBQVU7WUFDVixTQUFTO1lBQ1QsY0FBYztZQUNkLFNBQVM7WUFDVCxhQUFhO1lBQ2IsUUFBUTtZQUNSLEtBQUs7WUFDTCxnQkFBZ0I7U0FDakIsQ0FBQyxDQUNILENBQUMsT0FBTyxDQUFDO1lBQ1IsTUFBTSxFQUFFLFFBQVE7WUFDaEIsUUFBUSxFQUFFLFVBQVU7WUFDcEIsYUFBYSxFQUFFLGVBQWU7WUFDOUIsa0JBQWtCLEVBQUUsb0JBQW9CO1lBQ3hDLFdBQVcsRUFBRSxhQUFhO1lBQzFCLFNBQVMsRUFBRSxXQUFXO1lBQ3RCLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFlBQVksRUFBRSxjQUFjO1lBQzVCLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLFlBQVksRUFBRSxjQUFjO1lBQzVCLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLFdBQVcsRUFBRSxhQUFhO1lBQzFCLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLEdBQUcsRUFBRSxLQUFLO1lBQ1YsY0FBYyxFQUFFLGdCQUFnQjtTQUNqQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDbEMsTUFBTSxDQUFDLElBQUEscUNBQWlCLEVBQUMsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FDeEUsVUFBVSxDQUNYLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDM0MsTUFBTSxDQUFDLElBQUEscUNBQWlCLEVBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFeEUsTUFBTSxDQUFDLElBQUEscUNBQWlCLEVBQUMsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQy9ELFNBQVMsQ0FDVixDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9