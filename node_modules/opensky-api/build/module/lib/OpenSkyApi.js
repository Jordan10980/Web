('use strict');
import axios from 'axios';
import { URLSearchParams } from 'iso-url';
import { stateVectorMapper } from '../mappers/StateVectorMapper';
import { flightMapper } from './../mappers/FlightMapper';
const axiosConfig = {
    timeout: 5000,
    headers: { 'User-Agent': 'OpenSkyApi-TS/1.0' },
};
export class OpenSkyApi {
    static HOST = 'opensky-network.org';
    static API_ROOT = `https://${this.HOST}/api`;
    static STATES_URI = `${this.API_ROOT}/states/all`;
    static MY_STATES_URI = `${this.API_ROOT}/states/own`;
    static FLIGHTS_URI = `${OpenSkyApi.API_ROOT}/flights/all`;
    static FLIGHTS_BY_AIRCRAFT_URI = `${OpenSkyApi.API_ROOT}/flights/aircraft`;
    static FLIGHTS_BY_ARRIVAL_URI = `${OpenSkyApi.API_ROOT}/flights/arrival`;
    static FLIGHTS_BY_DEPARTURE_URI = `${OpenSkyApi.API_ROOT}/flights/departure`;
    _axios;
    authenticated = false;
    lastRequestTime = {
        GET_STATES: null,
        GET_MY_STATES: null,
        GET_FLIGHTS: null,
    };
    constructor(credentials) {
        if (credentials?.username && credentials?.password) {
            axiosConfig.auth = {
                username: credentials?.username,
                password: credentials?.password,
            };
            this.authenticated = true;
        }
        this._axios = axios.create(axiosConfig);
    }
    getFlights(beginTime, endTime) {
        const nvps = [];
        nvps.push({ begin: String(beginTime) });
        nvps.push({ end: String(endTime) });
        return this.getOpenSkyFlights(OpenSkyApi.FLIGHTS_URI, nvps);
    }
    getFlightsByArrivalAirport(airport, beginTime, endTime) {
        const nvps = [];
        nvps.push({ airport });
        nvps.push({ begin: String(beginTime) });
        nvps.push({ end: String(endTime) });
        return this.getOpenSkyFlights(OpenSkyApi.FLIGHTS_BY_ARRIVAL_URI, nvps);
    }
    getFlightsByDepartureAirport(airport, beginTime, endTime) {
        const nvps = [];
        nvps.push({ airport });
        nvps.push({ begin: String(beginTime) });
        nvps.push({ end: String(endTime) });
        return this.getOpenSkyFlights(OpenSkyApi.FLIGHTS_BY_DEPARTURE_URI, nvps);
    }
    getFlightsByAircraft(icao24, beginTime, endTime) {
        const nvps = [];
        nvps.push({ icao24 });
        nvps.push({ begin: String(beginTime) });
        nvps.push({ end: String(endTime) });
        return this.getOpenSkyFlights(OpenSkyApi.FLIGHTS_BY_AIRCRAFT_URI, nvps);
    }
    getStates(time, icao24, bbox) {
        const nvps = [];
        if (time) {
            nvps.push({ time: String(time) });
        }
        icao24?.forEach((i) => {
            nvps.push({ icao24: i });
        });
        if (bbox) {
            nvps.push({ lamin: String(bbox.minLatitude) });
            nvps.push({ lamax: String(bbox.maxLatitude) });
            nvps.push({ lomin: String(bbox.minLongitude) });
            nvps.push({ lomax: String(bbox.maxLongitude) });
        }
        if (this.checkRateLimit('GET_STATES', 4900, 9900)) {
            return this.getOpenSkyStates(OpenSkyApi.STATES_URI, nvps);
        }
        return null;
    }
    getMyStates(time, icao24, serials) {
        if (!this.authenticated) {
            throw new Error("Anonymous access of 'myStates' not allowed");
        }
        const nvps = [];
        if (time) {
            nvps.push({ time: String(time) });
        }
        icao24?.forEach((i) => {
            nvps.push({ icao24: i });
        });
        serials?.forEach((s) => {
            nvps.push({ serials: String(s) });
        });
        if (this.checkRateLimit('GET_MY_STATES', 900, 0)) {
            return this.getOpenSkyStates(OpenSkyApi.MY_STATES_URI, nvps);
        }
        return null;
    }
    async getOpenSkyStates(url, nvps) {
        const params = new URLSearchParams();
        nvps.forEach((i) => {
            for (const [key, value] of Object.entries(i)) {
                params.append(key, value);
            }
        });
        const { data } = await this._axios.get(url, {
            params,
        });
        const states = data?.states?.map((state) => stateVectorMapper(state)) || [];
        return {
            time: data.time,
            states,
        };
    }
    async getOpenSkyFlights(url, nvps) {
        const params = new URLSearchParams();
        nvps.forEach((i) => {
            for (const [key, value] of Object.entries(i)) {
                params.append(key, value);
            }
        });
        const { data } = await this._axios.get(url, {
            params,
            validateStatus: (status) => (status >= 200 && status < 300) || status === 404,
        });
        if (Array.isArray(data)) {
            return data.map((d) => flightMapper(d));
        }
        return new Array();
    }
    checkRateLimit(type, timeDiffAuth, timeDiffNoAuth) {
        const t = this.lastRequestTime[type];
        const now = Date.now();
        this.lastRequestTime[type] = now;
        return (t == null ||
            (this.authenticated && now - t > timeDiffAuth) ||
            (!this.authenticated && now - t > timeDiffNoAuth));
    }
}
export { BoundingBox } from './BoundingBox';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3BlblNreUFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvT3BlblNreUFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRWYsT0FBTyxLQUFvQyxNQUFNLE9BQU8sQ0FBQztBQUN6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBS2pFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUt6RCxNQUFNLFdBQVcsR0FBdUI7SUFDdEMsT0FBTyxFQUFFLElBQUk7SUFDYixPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsbUJBQW1CLEVBQUU7Q0FDL0MsQ0FBQztBQUVGLE1BQU0sT0FBTyxVQUFVO0lBQ2IsTUFBTSxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQztJQUNwQyxNQUFNLENBQUMsUUFBUSxHQUFHLFdBQVcsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDO0lBQzdDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxhQUFhLENBQUM7SUFDbEQsTUFBTSxDQUFDLGFBQWEsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLGFBQWEsQ0FBQztJQUNyRCxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsVUFBVSxDQUFDLFFBQVEsY0FBYyxDQUFDO0lBQzFELE1BQU0sQ0FBQyx1QkFBdUIsR0FBRyxHQUFHLFVBQVUsQ0FBQyxRQUFRLG1CQUFtQixDQUFDO0lBQzNFLE1BQU0sQ0FBQyxzQkFBc0IsR0FBRyxHQUFHLFVBQVUsQ0FBQyxRQUFRLGtCQUFrQixDQUFDO0lBQ3pFLE1BQU0sQ0FBQyx3QkFBd0IsR0FBRyxHQUFHLFVBQVUsQ0FBQyxRQUFRLG9CQUFvQixDQUFDO0lBRTdFLE1BQU0sQ0FBUTtJQUVkLGFBQWEsR0FBRyxLQUFLLENB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