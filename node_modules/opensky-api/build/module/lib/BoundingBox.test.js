import { BoundingBox } from './BoundingBox';
describe('BoundingBox', () => {
    it.each([{ lat: 91 }, { lat: 100 }, { lat: -91 }, { lat: -100 }])('should check invalid min-latitude $lat', ({ lat }) => {
        expect(() => {
            new BoundingBox(lat, 0, 0, 0);
        }).toThrowError(`Illegal latitude ${lat}. Must be within [-90, 90]`);
    });
    it.each([{ lat: 91 }, { lat: 100 }, { lat: -91 }, { lat: -100 }])('should check invalid max-latitude $lat', ({ lat }) => {
        expect(() => {
            new BoundingBox(0, lat, 0, 0);
        }).toThrowError(`Illegal latitude ${lat}. Must be within [-90, 90]`);
    });
    it.each([{ lon: 181 }, { lon: 280 }, { lon: -181 }, { lon: -280 }])('should check invalid min-longitude $lon', ({ lon }) => {
        expect(() => {
            new BoundingBox(0, 0, lon, 0);
        }).toThrowError(`Illegal longitude ${lon}. Must be within [-180, 180]`);
    });
    it.each([{ lon: 181 }, { lon: 280 }, { lon: -181 }, { lon: -280 }])('should check invalid max-longitude $lon', ({ lon }) => {
        expect(() => {
            new BoundingBox(0, 0, 0, lon);
        }).toThrowError(`Illegal longitude ${lon}. Must be within [-180, 180]`);
    });
    it('should call constructor', () => {
        const bb = new BoundingBox(-90, 90, -180, 180);
        expect(bb.minLatitude).toEqual(-90);
        expect(bb.maxLatitude).toEqual(90);
        expect(bb.minLongitude).toEqual(-180);
        expect(bb.maxLongitude).toEqual(180);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm91bmRpbmdCb3gudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvQm91bmRpbmdCb3gudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQzNCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUMvRCx3Q0FBd0MsRUFDeEMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDVixNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLG9CQUFvQixHQUFHLDRCQUE0QixDQUFDLENBQUM7SUFDdkUsQ0FBQyxDQUNGLENBQUM7SUFFRixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FDL0Qsd0NBQXdDLEVBQ3hDLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFO1FBQ1YsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsR0FBRyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ3ZFLENBQUMsQ0FDRixDQUFDO0lBRUYsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQ2pFLHlDQUF5QyxFQUN6QyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtRQUNWLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMscUJBQXFCLEdBQUcsOEJBQThCLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQ0YsQ0FBQztJQUVGLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUNqRSx5Q0FBeUMsRUFDekMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDVixNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLHFCQUFxQixHQUFHLDhCQUE4QixDQUFDLENBQUM7SUFDMUUsQ0FBQyxDQUNGLENBQUM7SUFFRixFQUFFLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLE1BQU0sRUFBRSxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUUvQyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9